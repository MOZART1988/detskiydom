<?php
/**
 * Created by PhpStorm.
 * User: MOZART
 * Date: 09.04.2018
 * Time: 21:44
 */

namespace app\modules\galleries\models;

use app\modules\image\models\Image;
use mtemplate\mclasses\ActiveRecord;
use yii\behaviors\TimestampBehavior;
use yii\db\Expression;
use yii\web\UploadedFile;

/**
 * @property integer $id
 * @property integer $is_active
 *
 * @property string $create_date
 * @property string $update_date
 * @property string $sefname
 * @property string $title
 * @property Image[] $images
 */

class Galleries extends ActiveRecord
{
    public $files;

    public static function tableName()
    {
        return 'galleries';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['is_active'], 'integer'],
            [['title', 'sefname'], 'required'],
            [['sefname'], 'string'],
            [['sefname'], 'unique'],
            [['create_date', 'update_date'], 'safe']
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'title' => 'Наименование',
            'sefname' => 'Уникальное имя (латинскими буквами)',
            'is_active' => 'Активность',
            'create_date' => 'Дата создания',
            'update_date' => 'Дата обновления',
            'Image' => 'Загрузите фотографии'
        ];
    }

    public function behaviors()
    {
        return [
            'Timestamp' => [
                'class' => TimestampBehavior::className(),
                'attributes' => [
                    ActiveRecord::EVENT_BEFORE_INSERT => ['create_date', 'update_date'],
                    ActiveRecord::EVENT_BEFORE_UPDATE => ['update_date']
                ],
                'value' => new Expression('NOW()'),
            ],
        ];
    }

    public function getListImageItems($imageData)
    {
        if ($imageData !== 'images' && $imageData !== 'data' && $imageData !== 'description') {
            return false;
        }

        $images = $this->images;

        if (!$images) {
            return false;
        }

        $result = [];

        foreach ($images as $image) {
            if ($imageData === 'images') {
                $result[] = $image->imageUrl;
            } elseif ($imageData === 'data') {
                $result[] = [
                    'caption' => $image->name,
                    'key' => $image->id,
                ];
            } else {
                $result[] = [
                    '{description}' => ($image->description ? $image->description : ''),
                    '{id}' => $image->id,
                    '{TAG_CSS_INIT}' => ''
                ];
            }
        }

        return $result;
    }

    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes);

        $files = UploadedFile::getInstances(new self(), 'files');
        if (!empty($files)) {
            foreach ($files as $file) {
                $filename = Image::uploadFile($file, self::tableName(), $this->id);
                Image::saveFile($filename, self::className(), $this->id);
            }
        }
    }

    public function beforeDelete()
    {
        if ($this->images) {
            foreach ($this->images as $image) {
                $image->delete();
            }
        }

        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }

    public function getImages()
    {
        return $this->hasMany(Image::className(), ['model_id' => 'id'])
            ->andWhere(['model_name' => self::className()])
            ->orderBy('sort_order')->all();
    }
}